import math as m
import cv2
import numpy as np
import random
def K_MEANS_PLUS(image,K):
    """
    Description : Following Function 'K_MEANS_PLUS' Is Used To Generate And Return K Initial Cluster Centroids
                  Using K-Means++ Algorithm
    Parameters : Following Function Has 2 Parameters
                 image - Which Stores And Returns Numpy Array Of An Image
                 K - Which Stores And Returns Number Of Initial Centroid To Be Generated / Number Of Clusters To Be Formed
    Formulae : The Algorithm For K-Means++ Have Already Been Explained And Is Just Implemented Here.
    Variables : h,w,c - Stores Height,Width,Channels Of An Image
                cluster_x - It Is A List Which Is Used To Store x Coordinate Of A Pixel
                cluster_y - It Is A List Which Is Used To Store y Coordinate Of A Pixel 
                pixel - It Is Used To Store Pixel Values Of Initial Centroid
               pixel1 - It Is Used To Store Pixel Values Of Each Datapoint
                distance - It Is A List Used To Store Euclidean Distance Of A Datapoint From Each Initial Cluster Centroid Choosen
                min_distance - It Is A List Which Stores Minimum Euclidean Distance From Set Of Initial Cluster Centroids
                initial_centroids - It Is An Array Of Initial Cenroids Generated By Following Function
    Returns : It Returns Variable 'initial_centroids' Which Stores An Array Of Initial Cluster Centroid 
    """
    h,w,c = image.shape[0],image.shape[1],image.shape[2]
    count = K
    x = random.randint(0,h)
    y = random.randint(0,w)
    pixel = []
    pixel1 = []
    
    for k in range(c):
        pixel.append(image[x,y,k])
    
    initial_centroids = [np.array(pixel)]
    distance = []
    cluster_x = []
    cluster_y = []
    min_distance = []

    while(count>1):
        
        min_distance = []
        cluster_x = []
        cluster_y = []
        pixel = []
        for i in range(h):
            for j in range(w):
                pixel1 = []
                for chan in range(c):# chan denotes number of channels in an image
                    pixel1.append(image[i,j,chan])
                
                for k in range(len(initial_centroids)):
                    distance.append(m.sqrt(np.sum((np.array(pixel1) - initial_centroids[k])**2)))
                mdis = min(distance)
                distance = []

                min_distance.append(mdis)
                cluster_x.append(i)
                cluster_y.append(j)
        maximum = max(min_distance)
        index1 = min_distance.index(maximum)
        for chan in range(c):
            pixel.append(image[ cluster_x[index1] , cluster_y[index1] , chan ])
        initial_centroids.append(pixel)
        count = count - 1
    return initial_centroids